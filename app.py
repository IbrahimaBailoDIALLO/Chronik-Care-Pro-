#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 29 22:53:02 2025

@author: ibrahima-bailodiallo
"""

import os  # Pour s√©curiser la cl√© API
from dotenv import load_dotenv
import chainlit as cl
from groq import Groq
import time
import asyncio  # Pour g√©rer l'animation



# Charger les variables d'environnement du fichier .env
load_dotenv()
# üîí S√©curisation de la cl√© API (NE PAS exposer dans le code)
api_key = os.getenv("GROQ_API_KEY")
if not api_key:
    raise ValueError("‚ö†Ô∏è ERREUR : La cl√© API GROQ est manquante. D√©finissez la variable d'environnement 'GROQ_API_KEY'.")

client = Groq(api_key=api_key)

# üîê Avertissement sur la confidentialit√©
CONFIDENTIALITY_NOTICE = """
‚ö†Ô∏è **Confidentialit√© & S√©curit√©**  
Les informations que vous fournissez sont strictement utilis√©es pour une √©valuation pr√©liminaire et ne remplacent **PAS** une consultation m√©dicale.  
üö® *Veuillez ne pas entrer de donn√©es personnelles sensibles (nom, adresse, num√©ro de s√©curit√© sociale, etc.).*
"""

# Prompt syst√®me am√©lior√© avec alerte sur la fiabilit√©
system_prompt = """**R√¥le** : Assistant M√©dical Cardio-Analytique
**Strict Protocol** :
1. N'utilisez QUE les donn√©es fournies
2. Demandez les informations manquantes
3. Pas de suppositions ou de cr√©ation de donn√©es
4. Signalez les limitations des informations
5. V√©rifiez les incoh√©rences et mentionnez les incertitudes

**R√©ponse Requise** :
üõë Si donn√©es manquantes : 
- Lister les informations n√©cessaires
- Expliquer leur importance clinique

‚úÖ Si donn√©es compl√®tes :
- Analyse selon guidelines ESC 2023
- Calcul des scores de risque
- Recommandations personnalis√©es
- **Mentionner toute incertitude et recommander une consultation si n√©cessaire**
"""

# Questions m√©dicales
initial_questions = {
    "diabete": "ü©∏ **Avez-vous un diagnostic de diab√®te ?** (Oui/Non)",
    "hta": "üíì **Souffrez-vous d'hypertension art√©rielle ?** (Oui/Non)",
    "tabac": "üö¨ **Consommez-vous du tabac ?** (Nombre cigarettes/jour)",
    "antecedents": "üß¨ **Avez-vous des ant√©c√©dents cardiaques familiaux ?** (D√©crivez bri√®vement)"
}

additional_questions = {
    "symptomes": "‚ö†Ô∏è **Quels sont vos sympt√¥mes principaux ?** (ex: douleurs thoraciques, essoufflement)",
    "duree_symptomes": "‚è≥ **Depuis combien de temps avez-vous ces sympt√¥mes ?**",
    "medicaments": "üíä **Prenez-vous actuellement des m√©dicaments ?** (Si oui, lesquels ?)",
    "examens": "üìä **Quels sont les r√©sultats de vos examens m√©dicaux ?** (ECG, √©chocardiogramme, etc.)",
    "analyses": "üß™ **Avez-vous les r√©sultats de vos analyses de sang ?** (lipides, glyc√©mie, etc.)",
    "parents": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Quel est l'√¢ge et les ant√©c√©dents m√©dicaux de vos parents ?** (si connus)"
}

async def heart_animation():
    """Affiche une animation de battements de c≈ìur."""
    beats = ["‚ù§Ô∏è", "üíó"]
    for _ in range(1):
        for beat in beats:
            await cl.Message(content=f"# {beat} **Prediagnostique en cours...**").send()
            await asyncio.sleep(0.5)

async def collect_data(questions, existing_data={}):
    """Collecte les donn√©es utilisateur et g√®re les r√©ponses manquantes."""
    collected_data = existing_data.copy()
    
    for key, question in questions.items():
        if key not in collected_data or collected_data[key] == "Non pr√©cis√©":
            res = await cl.AskUserMessage(content=question, timeout=60).send()
            if isinstance(res, dict) and 'output' in res:
                collected_data[key] = res['output'].strip()
            else:
                collected_data[key] = "Non pr√©cis√©"
    
    return collected_data

@cl.on_chat_start
async def start():
    """D√©marre l'analyse et collecte l'√¢ge."""
    await heart_animation()

    await cl.Message(content=CONFIDENTIALITY_NOTICE).send()

    await cl.Message(content="""
# ü©∫ **Chronik-Care Pro 3.0**  
*Syst√®me d'√©valuation pr√©liminaire des sympt√¥mes cardiaques* 

üîç **Veuillez fournir les informations suivantes :**  
    1Ô∏è‚É£ **Sympt√¥mes principaux**  
    2Ô∏è‚É£ **Dur√©e des sympt√¥mes**  
    3Ô∏è‚É£ **Ant√©c√©dents m√©dicaux connus**  
    4Ô∏è‚É£ **M√©dications actuelles**  

‚ö†Ô∏è *Toute analyse n√©cessite des donn√©es exactes.*
""").send()

    res = await cl.AskUserMessage(content="üéØ **Veuillez entrer votre √¢ge** :", timeout=60).send()
    age = res['output'].strip() if res and 'output' in res else "Non pr√©cis√©"

    if age == "Non pr√©cis√©":
        await cl.Message(content="‚ö†Ô∏è **L'√¢ge est obligatoire pour commencer l'analyse.**").send()
        return await start()

    await main(cl.Message(content=age), {"age": age})

@cl.on_message
async def main(message: cl.Message, initial_data=None):
    """Collecte les donn√©es et g√©n√®re l'analyse."""
    try:
        medical_data = initial_data if initial_data else {}

        await heart_animation()

        # Phase 1 : Collecte des donn√©es
        medical_data = await collect_data(initial_questions, medical_data)

        # V√©rification des donn√©es manquantes
        missing_data = [k for k, v in medical_data.items() if v == "Non pr√©cis√©"]
        while missing_data:
            await cl.Message(content=f"‚ùå **Donn√©es manquantes** : {', '.join(missing_data)}").send()
            medical_data.update(await collect_data({k: initial_questions[k] for k in missing_data}))
            missing_data = [k for k, v in medical_data.items() if v == "Non pr√©cis√©"]

        # Phase 2 : Collecte d'infos suppl√©mentaires
        additional_data = await collect_data(additional_questions)
        full_data = {**medical_data, **additional_data}

        # Phase 3 : Envoi au mod√®le
        query = f"""PATIENT - {full_data['age']} ans
Sympt√¥mes : {full_data['symptomes']}
Dur√©e : {full_data['duree_symptomes']}
M√©dicaments : {full_data['medicaments']}
Examens : {full_data['examens']}
Analyses : {full_data['analyses']}
Ant√©c√©dents : Diab√®te({medical_data['diabete']}), HTA({medical_data['hta']})
Tabagisme : {medical_data['tabac']}
Histoire familiale : {full_data['parents']}"""

        chat_completion = client.chat.completions.create(
            messages=[{"role": "system", "content": system_prompt},
                      {"role": "user", "content": query}],
            model="llama-3.1-8b-instant",
            temperature=0,
            max_tokens=500,
            stop=["##"]
        )

        response = chat_completion.choices[0].message.content
        response += "\n\nüõë **Une consultation m√©dicale est recommand√©e en cas de doute.**"

        await cl.Message(content=response).send()

    except Exception as e:
        await cl.Message(content=f"‚ö†Ô∏è **Erreur syst√®me** : {str(e)}").send()